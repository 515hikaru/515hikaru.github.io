<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ProgrammingTips on i was perfect</title>
    <link>/categories/programmingtips/</link>
    <description>Recent content in ProgrammingTips on i was perfect</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 09 Apr 2018 22:31:49 +0900</lastBuildDate>
    
	<atom:link href="/categories/programmingtips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abstract Base Classes with Python</title>
      <link>/post/2018/04/09/python-abc-module/</link>
      <pubDate>Mon, 09 Apr 2018 22:31:49 +0900</pubDate>
      
      <guid>/post/2018/04/09/python-abc-module/</guid>
      <description>最近は Java っぽい Python を書いている。いや、僕は Java を書いたことがないので本当に Java っぽいのかはよくわからないのだけれど。
そんなわけで、 class の使い方について最近学びが多い。 Effective Python で読んだメタクラスとかが早くも役に立っている。ということで今日は抽象クラスの使い方なんかをまとめておく。
abc モジュール abc って言われた時、「アルファベットの最初の3文字がどうかした?」と思ったけれど、これは &amp;ldquo;Abstract Base Classes&amp;rdquo; の略。日本語にすると抽象基底クラス。
いつも使えるわけではないが、
 類似の処理をするクラス群がある クラスごとに固有のメソッドと共通のメソッドがある  という状況下において威力を発揮する。具体的には、
 共通のメソッド及びパブリックメソッドは統一して抽象基底クラスで定義  各種クラスは抽象基底クラスを継承して固有のメソッドのみを実装する   とすることでクラスが増えても固有のメソッドにのみ注力すればよい。
以下に具体例を用いてどんな利点があるのかを書くが、正確なことは公式ドキュメントを見るべきだ。この記事書く必要なくない?
具体例 動物を鳴かせる たとえばよくある例で Dog というクラスに鳴く(bark)というメソッドを定義することを考える1。
class Dog(object): def bark(self): print(&#39;わんわん&#39;)  こんなふうに定義して使っていたところ、動物は犬だけじゃなく猫も必要だということがわかった。ということで猫も定義しよう。
class Cat(object): def meow(self): print(&#39;にゃー&#39;)  この実装の問題 とここで次のようなユースケースで早速困る。
def make_sound(animal): animal.bark() # animal が Dog だったらOK, Cat だったらエラー  ということで、動物の鳴き声メソッドは統一するべきだとわかる。ここでは sound としよう。</description>
    </item>
    
  </channel>
</rss>